package com.project.zhang.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.project.zhang.entity.NewsList;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "NEWS_LIST".
*/
public class NewsListDao extends AbstractDao<NewsList, Long> {

    public static final String TABLENAME = "NEWS_LIST";

    /**
     * Properties of entity NewsList.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property News_id = new Property(0, Long.class, "news_id", true, "_id");
        public final static Property Type = new Property(1, String.class, "type", false, "type");
        public final static Property Title = new Property(2, String.class, "title", false, "title");
        public final static Property News_content = new Property(3, String.class, "news_content", false, "news_content");
    }


    public NewsListDao(DaoConfig config) {
        super(config);
    }
    
    public NewsListDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"NEWS_LIST\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: news_id
                "\"type\" TEXT," + // 1: type
                "\"title\" TEXT," + // 2: title
                "\"news_content\" TEXT);"); // 3: news_content
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"NEWS_LIST\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, NewsList entity) {
        stmt.clearBindings();
 
        Long news_id = entity.getNews_id();
        if (news_id != null) {
            stmt.bindLong(1, news_id);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(2, type);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(3, title);
        }
 
        String news_content = entity.getNews_content();
        if (news_content != null) {
            stmt.bindString(4, news_content);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, NewsList entity) {
        stmt.clearBindings();
 
        Long news_id = entity.getNews_id();
        if (news_id != null) {
            stmt.bindLong(1, news_id);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(2, type);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(3, title);
        }
 
        String news_content = entity.getNews_content();
        if (news_content != null) {
            stmt.bindString(4, news_content);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public NewsList readEntity(Cursor cursor, int offset) {
        NewsList entity = new NewsList( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // news_id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // type
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // title
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // news_content
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, NewsList entity, int offset) {
        entity.setNews_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setType(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTitle(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setNews_content(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(NewsList entity, long rowId) {
        entity.setNews_id(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(NewsList entity) {
        if(entity != null) {
            return entity.getNews_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(NewsList entity) {
        return entity.getNews_id() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
