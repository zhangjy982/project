package com.project.zhang.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.project.zhang.entity.PeopleMeetingRecord;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PEOPLE_MEETING_RECORD".
*/
public class PeopleMeetingRecordDao extends AbstractDao<PeopleMeetingRecord, Long> {

    public static final String TABLENAME = "PEOPLE_MEETING_RECORD";

    /**
     * Properties of entity PeopleMeetingRecord.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Iid = new Property(1, String.class, "iid", false, "IID");
        public final static Property Dibao_people = new Property(2, String.class, "dibao_people", false, "DIBAO_PEOPLE");
        public final static Property Household_number = new Property(3, String.class, "household_number", false, "HOUSEHOLD_NUMBER");
        public final static Property Meeting_time = new Property(4, String.class, "meeting_time", false, "MEETING_TIME");
        public final static Property Meeting_place = new Property(5, String.class, "meeting_place", false, "MEETING_PLACE");
        public final static Property Host = new Property(6, String.class, "host", false, "HOST");
        public final static Property People_represent = new Property(7, String.class, "people_represent", false, "PEOPLE_REPRESENT");
        public final static Property Committee_represent = new Property(8, String.class, "committee_represent", false, "COMMITTEE_REPRESENT");
        public final static Property Organization_represent = new Property(9, String.class, "organization_represent", false, "ORGANIZATION_REPRESENT");
        public final static Property Record_people = new Property(10, String.class, "record_people", false, "RECORD_PEOPLE");
        public final static Property Agree_number = new Property(11, String.class, "agree_number", false, "AGREE_NUMBER");
        public final static Property Disagree_number = new Property(12, String.class, "disagree_number", false, "DISAGREE_NUMBER");
    }


    public PeopleMeetingRecordDao(DaoConfig config) {
        super(config);
    }
    
    public PeopleMeetingRecordDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PEOPLE_MEETING_RECORD\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"IID\" TEXT," + // 1: iid
                "\"DIBAO_PEOPLE\" TEXT," + // 2: dibao_people
                "\"HOUSEHOLD_NUMBER\" TEXT," + // 3: household_number
                "\"MEETING_TIME\" TEXT," + // 4: meeting_time
                "\"MEETING_PLACE\" TEXT," + // 5: meeting_place
                "\"HOST\" TEXT," + // 6: host
                "\"PEOPLE_REPRESENT\" TEXT," + // 7: people_represent
                "\"COMMITTEE_REPRESENT\" TEXT," + // 8: committee_represent
                "\"ORGANIZATION_REPRESENT\" TEXT," + // 9: organization_represent
                "\"RECORD_PEOPLE\" TEXT," + // 10: record_people
                "\"AGREE_NUMBER\" TEXT," + // 11: agree_number
                "\"DISAGREE_NUMBER\" TEXT);"); // 12: disagree_number
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PEOPLE_MEETING_RECORD\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, PeopleMeetingRecord entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String iid = entity.getIid();
        if (iid != null) {
            stmt.bindString(2, iid);
        }
 
        String dibao_people = entity.getDibao_people();
        if (dibao_people != null) {
            stmt.bindString(3, dibao_people);
        }
 
        String household_number = entity.getHousehold_number();
        if (household_number != null) {
            stmt.bindString(4, household_number);
        }
 
        String meeting_time = entity.getMeeting_time();
        if (meeting_time != null) {
            stmt.bindString(5, meeting_time);
        }
 
        String meeting_place = entity.getMeeting_place();
        if (meeting_place != null) {
            stmt.bindString(6, meeting_place);
        }
 
        String host = entity.getHost();
        if (host != null) {
            stmt.bindString(7, host);
        }
 
        String people_represent = entity.getPeople_represent();
        if (people_represent != null) {
            stmt.bindString(8, people_represent);
        }
 
        String committee_represent = entity.getCommittee_represent();
        if (committee_represent != null) {
            stmt.bindString(9, committee_represent);
        }
 
        String organization_represent = entity.getOrganization_represent();
        if (organization_represent != null) {
            stmt.bindString(10, organization_represent);
        }
 
        String record_people = entity.getRecord_people();
        if (record_people != null) {
            stmt.bindString(11, record_people);
        }
 
        String agree_number = entity.getAgree_number();
        if (agree_number != null) {
            stmt.bindString(12, agree_number);
        }
 
        String disagree_number = entity.getDisagree_number();
        if (disagree_number != null) {
            stmt.bindString(13, disagree_number);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, PeopleMeetingRecord entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String iid = entity.getIid();
        if (iid != null) {
            stmt.bindString(2, iid);
        }
 
        String dibao_people = entity.getDibao_people();
        if (dibao_people != null) {
            stmt.bindString(3, dibao_people);
        }
 
        String household_number = entity.getHousehold_number();
        if (household_number != null) {
            stmt.bindString(4, household_number);
        }
 
        String meeting_time = entity.getMeeting_time();
        if (meeting_time != null) {
            stmt.bindString(5, meeting_time);
        }
 
        String meeting_place = entity.getMeeting_place();
        if (meeting_place != null) {
            stmt.bindString(6, meeting_place);
        }
 
        String host = entity.getHost();
        if (host != null) {
            stmt.bindString(7, host);
        }
 
        String people_represent = entity.getPeople_represent();
        if (people_represent != null) {
            stmt.bindString(8, people_represent);
        }
 
        String committee_represent = entity.getCommittee_represent();
        if (committee_represent != null) {
            stmt.bindString(9, committee_represent);
        }
 
        String organization_represent = entity.getOrganization_represent();
        if (organization_represent != null) {
            stmt.bindString(10, organization_represent);
        }
 
        String record_people = entity.getRecord_people();
        if (record_people != null) {
            stmt.bindString(11, record_people);
        }
 
        String agree_number = entity.getAgree_number();
        if (agree_number != null) {
            stmt.bindString(12, agree_number);
        }
 
        String disagree_number = entity.getDisagree_number();
        if (disagree_number != null) {
            stmt.bindString(13, disagree_number);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public PeopleMeetingRecord readEntity(Cursor cursor, int offset) {
        PeopleMeetingRecord entity = new PeopleMeetingRecord( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // iid
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // dibao_people
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // household_number
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // meeting_time
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // meeting_place
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // host
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // people_represent
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // committee_represent
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // organization_represent
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // record_people
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // agree_number
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12) // disagree_number
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, PeopleMeetingRecord entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setIid(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDibao_people(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setHousehold_number(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setMeeting_time(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setMeeting_place(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setHost(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setPeople_represent(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setCommittee_represent(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setOrganization_represent(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setRecord_people(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setAgree_number(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setDisagree_number(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(PeopleMeetingRecord entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(PeopleMeetingRecord entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(PeopleMeetingRecord entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
