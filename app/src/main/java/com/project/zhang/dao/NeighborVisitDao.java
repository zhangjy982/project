package com.project.zhang.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.project.zhang.entity.NeighborVisit;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "NEIGHBOR_VISIT".
*/
public class NeighborVisitDao extends AbstractDao<NeighborVisit, Long> {

    public static final String TABLENAME = "NEIGHBOR_VISIT";

    /**
     * Properties of entity NeighborVisit.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Iid = new Property(1, String.class, "iid", false, "IID");
        public final static Property Asked_name = new Property(2, String.class, "asked_name", false, "ASKED_NAME");
        public final static Property Asked_sex = new Property(3, String.class, "asked_sex", false, "ASKED_SEX");
        public final static Property Asked_born = new Property(4, String.class, "asked_born", false, "ASKED_BORN");
        public final static Property Asked_nationality = new Property(5, String.class, "asked_nationality", false, "ASKED_NATIONALITY");
        public final static Property Asked_location = new Property(6, String.class, "asked_location", false, "ASKED_LOCATION");
        public final static Property Asked_nation = new Property(7, String.class, "asked_nation", false, "ASKED_NATION");
        public final static Property Asked_culture = new Property(8, String.class, "asked_culture", false, "ASKED_CULTURE");
        public final static Property Asked_tel = new Property(9, String.class, "asked_tel", false, "ASKED_TEL");
        public final static Property Asked_papers_type = new Property(10, String.class, "asked_papers_type", false, "ASKED_PAPERS_TYPE");
        public final static Property Asked_papers_number = new Property(11, String.class, "asked_papers_number", false, "ASKED_PAPERS_NUMBER");
        public final static Property Asked_address = new Property(12, String.class, "asked_address", false, "ASKED_ADDRESS");
        public final static Property Asked_times = new Property(13, String.class, "asked_times", false, "ASKED_TIMES");
        public final static Property Asked_time_year = new Property(14, String.class, "asked_time_year", false, "ASKED_TIME_YEAR");
        public final static Property Asked_time_month = new Property(15, String.class, "asked_time_month", false, "ASKED_TIME_MONTH");
        public final static Property Asked_time_day = new Property(16, String.class, "asked_time_day", false, "ASKED_TIME_DAY");
        public final static Property Asked_time_hour = new Property(17, String.class, "asked_time_hour", false, "ASKED_TIME_HOUR");
        public final static Property Asked_time_minute = new Property(18, String.class, "asked_time_minute", false, "ASKED_TIME_MINUTE");
        public final static Property Asked_place = new Property(19, String.class, "asked_place", false, "ASKED_PLACE");
        public final static Property Ask_people_name1 = new Property(20, String.class, "ask_people_name1", false, "ASK_PEOPLE_NAME1");
        public final static Property Ask_people_number1 = new Property(21, String.class, "ask_people_number1", false, "ASK_PEOPLE_NUMBER1");
        public final static Property Ask_people_name2 = new Property(22, String.class, "ask_people_name2", false, "ASK_PEOPLE_NAME2");
        public final static Property Ask_people_number2 = new Property(23, String.class, "ask_people_number2", false, "ASK_PEOPLE_NUMBER2");
        public final static Property Record_people = new Property(24, String.class, "record_people", false, "RECORD_PEOPLE");
        public final static Property Where_work = new Property(25, String.class, "where_work", false, "WHERE_WORK");
        public final static Property Specific_thing = new Property(26, String.class, "specific_thing", false, "SPECIFIC_THING");
        public final static Property Above_situation_clea = new Property(27, String.class, "above_situation_clea", false, "ABOVE_SITUATION_CLEA");
        public final static Property Whether_know_situation = new Property(28, String.class, "whether_know_situation", false, "WHETHER_KNOW_SITUATION");
        public final static Property Whether_know_people = new Property(29, String.class, "whether_know_people", false, "WHETHER_KNOW_PEOPLE");
        public final static Property Know_situation = new Property(30, String.class, "know_situation", false, "KNOW_SITUATION");
    }


    public NeighborVisitDao(DaoConfig config) {
        super(config);
    }
    
    public NeighborVisitDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"NEIGHBOR_VISIT\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"IID\" TEXT," + // 1: iid
                "\"ASKED_NAME\" TEXT," + // 2: asked_name
                "\"ASKED_SEX\" TEXT," + // 3: asked_sex
                "\"ASKED_BORN\" TEXT," + // 4: asked_born
                "\"ASKED_NATIONALITY\" TEXT," + // 5: asked_nationality
                "\"ASKED_LOCATION\" TEXT," + // 6: asked_location
                "\"ASKED_NATION\" TEXT," + // 7: asked_nation
                "\"ASKED_CULTURE\" TEXT," + // 8: asked_culture
                "\"ASKED_TEL\" TEXT," + // 9: asked_tel
                "\"ASKED_PAPERS_TYPE\" TEXT," + // 10: asked_papers_type
                "\"ASKED_PAPERS_NUMBER\" TEXT," + // 11: asked_papers_number
                "\"ASKED_ADDRESS\" TEXT," + // 12: asked_address
                "\"ASKED_TIMES\" TEXT," + // 13: asked_times
                "\"ASKED_TIME_YEAR\" TEXT," + // 14: asked_time_year
                "\"ASKED_TIME_MONTH\" TEXT," + // 15: asked_time_month
                "\"ASKED_TIME_DAY\" TEXT," + // 16: asked_time_day
                "\"ASKED_TIME_HOUR\" TEXT," + // 17: asked_time_hour
                "\"ASKED_TIME_MINUTE\" TEXT," + // 18: asked_time_minute
                "\"ASKED_PLACE\" TEXT," + // 19: asked_place
                "\"ASK_PEOPLE_NAME1\" TEXT," + // 20: ask_people_name1
                "\"ASK_PEOPLE_NUMBER1\" TEXT," + // 21: ask_people_number1
                "\"ASK_PEOPLE_NAME2\" TEXT," + // 22: ask_people_name2
                "\"ASK_PEOPLE_NUMBER2\" TEXT," + // 23: ask_people_number2
                "\"RECORD_PEOPLE\" TEXT," + // 24: record_people
                "\"WHERE_WORK\" TEXT," + // 25: where_work
                "\"SPECIFIC_THING\" TEXT," + // 26: specific_thing
                "\"ABOVE_SITUATION_CLEA\" TEXT," + // 27: above_situation_clea
                "\"WHETHER_KNOW_SITUATION\" TEXT," + // 28: whether_know_situation
                "\"WHETHER_KNOW_PEOPLE\" TEXT," + // 29: whether_know_people
                "\"KNOW_SITUATION\" TEXT);"); // 30: know_situation
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"NEIGHBOR_VISIT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, NeighborVisit entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String iid = entity.getIid();
        if (iid != null) {
            stmt.bindString(2, iid);
        }
 
        String asked_name = entity.getAsked_name();
        if (asked_name != null) {
            stmt.bindString(3, asked_name);
        }
 
        String asked_sex = entity.getAsked_sex();
        if (asked_sex != null) {
            stmt.bindString(4, asked_sex);
        }
 
        String asked_born = entity.getAsked_born();
        if (asked_born != null) {
            stmt.bindString(5, asked_born);
        }
 
        String asked_nationality = entity.getAsked_nationality();
        if (asked_nationality != null) {
            stmt.bindString(6, asked_nationality);
        }
 
        String asked_location = entity.getAsked_location();
        if (asked_location != null) {
            stmt.bindString(7, asked_location);
        }
 
        String asked_nation = entity.getAsked_nation();
        if (asked_nation != null) {
            stmt.bindString(8, asked_nation);
        }
 
        String asked_culture = entity.getAsked_culture();
        if (asked_culture != null) {
            stmt.bindString(9, asked_culture);
        }
 
        String asked_tel = entity.getAsked_tel();
        if (asked_tel != null) {
            stmt.bindString(10, asked_tel);
        }
 
        String asked_papers_type = entity.getAsked_papers_type();
        if (asked_papers_type != null) {
            stmt.bindString(11, asked_papers_type);
        }
 
        String asked_papers_number = entity.getAsked_papers_number();
        if (asked_papers_number != null) {
            stmt.bindString(12, asked_papers_number);
        }
 
        String asked_address = entity.getAsked_address();
        if (asked_address != null) {
            stmt.bindString(13, asked_address);
        }
 
        String asked_times = entity.getAsked_times();
        if (asked_times != null) {
            stmt.bindString(14, asked_times);
        }
 
        String asked_time_year = entity.getAsked_time_year();
        if (asked_time_year != null) {
            stmt.bindString(15, asked_time_year);
        }
 
        String asked_time_month = entity.getAsked_time_month();
        if (asked_time_month != null) {
            stmt.bindString(16, asked_time_month);
        }
 
        String asked_time_day = entity.getAsked_time_day();
        if (asked_time_day != null) {
            stmt.bindString(17, asked_time_day);
        }
 
        String asked_time_hour = entity.getAsked_time_hour();
        if (asked_time_hour != null) {
            stmt.bindString(18, asked_time_hour);
        }
 
        String asked_time_minute = entity.getAsked_time_minute();
        if (asked_time_minute != null) {
            stmt.bindString(19, asked_time_minute);
        }
 
        String asked_place = entity.getAsked_place();
        if (asked_place != null) {
            stmt.bindString(20, asked_place);
        }
 
        String ask_people_name1 = entity.getAsk_people_name1();
        if (ask_people_name1 != null) {
            stmt.bindString(21, ask_people_name1);
        }
 
        String ask_people_number1 = entity.getAsk_people_number1();
        if (ask_people_number1 != null) {
            stmt.bindString(22, ask_people_number1);
        }
 
        String ask_people_name2 = entity.getAsk_people_name2();
        if (ask_people_name2 != null) {
            stmt.bindString(23, ask_people_name2);
        }
 
        String ask_people_number2 = entity.getAsk_people_number2();
        if (ask_people_number2 != null) {
            stmt.bindString(24, ask_people_number2);
        }
 
        String record_people = entity.getRecord_people();
        if (record_people != null) {
            stmt.bindString(25, record_people);
        }
 
        String where_work = entity.getWhere_work();
        if (where_work != null) {
            stmt.bindString(26, where_work);
        }
 
        String specific_thing = entity.getSpecific_thing();
        if (specific_thing != null) {
            stmt.bindString(27, specific_thing);
        }
 
        String above_situation_clea = entity.getAbove_situation_clea();
        if (above_situation_clea != null) {
            stmt.bindString(28, above_situation_clea);
        }
 
        String whether_know_situation = entity.getWhether_know_situation();
        if (whether_know_situation != null) {
            stmt.bindString(29, whether_know_situation);
        }
 
        String whether_know_people = entity.getWhether_know_people();
        if (whether_know_people != null) {
            stmt.bindString(30, whether_know_people);
        }
 
        String know_situation = entity.getKnow_situation();
        if (know_situation != null) {
            stmt.bindString(31, know_situation);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, NeighborVisit entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String iid = entity.getIid();
        if (iid != null) {
            stmt.bindString(2, iid);
        }
 
        String asked_name = entity.getAsked_name();
        if (asked_name != null) {
            stmt.bindString(3, asked_name);
        }
 
        String asked_sex = entity.getAsked_sex();
        if (asked_sex != null) {
            stmt.bindString(4, asked_sex);
        }
 
        String asked_born = entity.getAsked_born();
        if (asked_born != null) {
            stmt.bindString(5, asked_born);
        }
 
        String asked_nationality = entity.getAsked_nationality();
        if (asked_nationality != null) {
            stmt.bindString(6, asked_nationality);
        }
 
        String asked_location = entity.getAsked_location();
        if (asked_location != null) {
            stmt.bindString(7, asked_location);
        }
 
        String asked_nation = entity.getAsked_nation();
        if (asked_nation != null) {
            stmt.bindString(8, asked_nation);
        }
 
        String asked_culture = entity.getAsked_culture();
        if (asked_culture != null) {
            stmt.bindString(9, asked_culture);
        }
 
        String asked_tel = entity.getAsked_tel();
        if (asked_tel != null) {
            stmt.bindString(10, asked_tel);
        }
 
        String asked_papers_type = entity.getAsked_papers_type();
        if (asked_papers_type != null) {
            stmt.bindString(11, asked_papers_type);
        }
 
        String asked_papers_number = entity.getAsked_papers_number();
        if (asked_papers_number != null) {
            stmt.bindString(12, asked_papers_number);
        }
 
        String asked_address = entity.getAsked_address();
        if (asked_address != null) {
            stmt.bindString(13, asked_address);
        }
 
        String asked_times = entity.getAsked_times();
        if (asked_times != null) {
            stmt.bindString(14, asked_times);
        }
 
        String asked_time_year = entity.getAsked_time_year();
        if (asked_time_year != null) {
            stmt.bindString(15, asked_time_year);
        }
 
        String asked_time_month = entity.getAsked_time_month();
        if (asked_time_month != null) {
            stmt.bindString(16, asked_time_month);
        }
 
        String asked_time_day = entity.getAsked_time_day();
        if (asked_time_day != null) {
            stmt.bindString(17, asked_time_day);
        }
 
        String asked_time_hour = entity.getAsked_time_hour();
        if (asked_time_hour != null) {
            stmt.bindString(18, asked_time_hour);
        }
 
        String asked_time_minute = entity.getAsked_time_minute();
        if (asked_time_minute != null) {
            stmt.bindString(19, asked_time_minute);
        }
 
        String asked_place = entity.getAsked_place();
        if (asked_place != null) {
            stmt.bindString(20, asked_place);
        }
 
        String ask_people_name1 = entity.getAsk_people_name1();
        if (ask_people_name1 != null) {
            stmt.bindString(21, ask_people_name1);
        }
 
        String ask_people_number1 = entity.getAsk_people_number1();
        if (ask_people_number1 != null) {
            stmt.bindString(22, ask_people_number1);
        }
 
        String ask_people_name2 = entity.getAsk_people_name2();
        if (ask_people_name2 != null) {
            stmt.bindString(23, ask_people_name2);
        }
 
        String ask_people_number2 = entity.getAsk_people_number2();
        if (ask_people_number2 != null) {
            stmt.bindString(24, ask_people_number2);
        }
 
        String record_people = entity.getRecord_people();
        if (record_people != null) {
            stmt.bindString(25, record_people);
        }
 
        String where_work = entity.getWhere_work();
        if (where_work != null) {
            stmt.bindString(26, where_work);
        }
 
        String specific_thing = entity.getSpecific_thing();
        if (specific_thing != null) {
            stmt.bindString(27, specific_thing);
        }
 
        String above_situation_clea = entity.getAbove_situation_clea();
        if (above_situation_clea != null) {
            stmt.bindString(28, above_situation_clea);
        }
 
        String whether_know_situation = entity.getWhether_know_situation();
        if (whether_know_situation != null) {
            stmt.bindString(29, whether_know_situation);
        }
 
        String whether_know_people = entity.getWhether_know_people();
        if (whether_know_people != null) {
            stmt.bindString(30, whether_know_people);
        }
 
        String know_situation = entity.getKnow_situation();
        if (know_situation != null) {
            stmt.bindString(31, know_situation);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public NeighborVisit readEntity(Cursor cursor, int offset) {
        NeighborVisit entity = new NeighborVisit( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // iid
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // asked_name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // asked_sex
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // asked_born
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // asked_nationality
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // asked_location
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // asked_nation
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // asked_culture
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // asked_tel
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // asked_papers_type
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // asked_papers_number
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // asked_address
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // asked_times
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // asked_time_year
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // asked_time_month
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // asked_time_day
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // asked_time_hour
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // asked_time_minute
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // asked_place
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // ask_people_name1
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // ask_people_number1
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // ask_people_name2
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // ask_people_number2
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24), // record_people
            cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25), // where_work
            cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26), // specific_thing
            cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27), // above_situation_clea
            cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28), // whether_know_situation
            cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29), // whether_know_people
            cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30) // know_situation
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, NeighborVisit entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setIid(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setAsked_name(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setAsked_sex(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setAsked_born(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setAsked_nationality(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setAsked_location(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setAsked_nation(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setAsked_culture(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setAsked_tel(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setAsked_papers_type(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setAsked_papers_number(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setAsked_address(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setAsked_times(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setAsked_time_year(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setAsked_time_month(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setAsked_time_day(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setAsked_time_hour(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setAsked_time_minute(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setAsked_place(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setAsk_people_name1(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setAsk_people_number1(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setAsk_people_name2(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setAsk_people_number2(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setRecord_people(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
        entity.setWhere_work(cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25));
        entity.setSpecific_thing(cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26));
        entity.setAbove_situation_clea(cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27));
        entity.setWhether_know_situation(cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28));
        entity.setWhether_know_people(cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29));
        entity.setKnow_situation(cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(NeighborVisit entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(NeighborVisit entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(NeighborVisit entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
