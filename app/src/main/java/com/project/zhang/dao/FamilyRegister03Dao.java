package com.project.zhang.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.project.zhang.entity.FamilyRegister03;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "FAMILY_REGISTER03".
*/
public class FamilyRegister03Dao extends AbstractDao<FamilyRegister03, Long> {

    public static final String TABLENAME = "FAMILY_REGISTER03";

    /**
     * Properties of entity FamilyRegister03.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Iid = new Property(1, String.class, "iid", false, "IID");
        public final static Property Applicant_iid = new Property(2, String.class, "applicant_iid", false, "APPLICANT_IID");
        public final static Property Poverty_reason = new Property(3, String.class, "poverty_reason", false, "POVERTY_REASON");
        public final static Property Statement = new Property(4, String.class, "statement", false, "STATEMENT");
        public final static Property Apply_time = new Property(5, String.class, "apply_time", false, "APPLY_TIME");
    }


    public FamilyRegister03Dao(DaoConfig config) {
        super(config);
    }
    
    public FamilyRegister03Dao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"FAMILY_REGISTER03\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"IID\" TEXT," + // 1: iid
                "\"APPLICANT_IID\" TEXT," + // 2: applicant_iid
                "\"POVERTY_REASON\" TEXT," + // 3: poverty_reason
                "\"STATEMENT\" TEXT," + // 4: statement
                "\"APPLY_TIME\" TEXT);"); // 5: apply_time
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"FAMILY_REGISTER03\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, FamilyRegister03 entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String iid = entity.getIid();
        if (iid != null) {
            stmt.bindString(2, iid);
        }
 
        String applicant_iid = entity.getApplicant_iid();
        if (applicant_iid != null) {
            stmt.bindString(3, applicant_iid);
        }
 
        String poverty_reason = entity.getPoverty_reason();
        if (poverty_reason != null) {
            stmt.bindString(4, poverty_reason);
        }
 
        String statement = entity.getStatement();
        if (statement != null) {
            stmt.bindString(5, statement);
        }
 
        String apply_time = entity.getApply_time();
        if (apply_time != null) {
            stmt.bindString(6, apply_time);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, FamilyRegister03 entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String iid = entity.getIid();
        if (iid != null) {
            stmt.bindString(2, iid);
        }
 
        String applicant_iid = entity.getApplicant_iid();
        if (applicant_iid != null) {
            stmt.bindString(3, applicant_iid);
        }
 
        String poverty_reason = entity.getPoverty_reason();
        if (poverty_reason != null) {
            stmt.bindString(4, poverty_reason);
        }
 
        String statement = entity.getStatement();
        if (statement != null) {
            stmt.bindString(5, statement);
        }
 
        String apply_time = entity.getApply_time();
        if (apply_time != null) {
            stmt.bindString(6, apply_time);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public FamilyRegister03 readEntity(Cursor cursor, int offset) {
        FamilyRegister03 entity = new FamilyRegister03( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // iid
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // applicant_iid
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // poverty_reason
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // statement
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // apply_time
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, FamilyRegister03 entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setIid(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setApplicant_iid(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPoverty_reason(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setStatement(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setApply_time(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(FamilyRegister03 entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(FamilyRegister03 entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(FamilyRegister03 entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
