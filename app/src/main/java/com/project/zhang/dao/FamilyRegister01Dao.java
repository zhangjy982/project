package com.project.zhang.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.project.zhang.entity.FamilyRegister01;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "FAMILY_REGISTER01".
*/
public class FamilyRegister01Dao extends AbstractDao<FamilyRegister01, Long> {

    public static final String TABLENAME = "FAMILY_REGISTER01";

    /**
     * Properties of entity FamilyRegister01.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Iid = new Property(1, String.class, "iid", false, "IID");
        public final static Property Applicant_iid = new Property(2, String.class, "applicant_iid", false, "APPLICANT_IID");
        public final static Property Name = new Property(3, String.class, "name", false, "NAME");
        public final static Property Id_number = new Property(4, String.class, "id_number", false, "ID_NUMBER");
        public final static Property Live_number = new Property(5, String.class, "live_number", false, "LIVE_NUMBER");
        public final static Property Sex = new Property(6, String.class, "sex", false, "SEX");
        public final static Property Nation = new Property(7, String.class, "nation", false, "NATION");
        public final static Property Political_outlook = new Property(8, String.class, "political_outlook", false, "POLITICAL_OUTLOOK");
        public final static Property Culture = new Property(9, String.class, "culture", false, "CULTURE");
        public final static Property Marriage = new Property(10, String.class, "marriage", false, "MARRIAGE");
        public final static Property Family_relationship = new Property(11, String.class, "family_relationship", false, "FAMILY_RELATIONSHIP");
        public final static Property City_or_village = new Property(12, String.class, "city_or_village", false, "CITY_OR_VILLAGE");
        public final static Property Body_situation = new Property(13, String.class, "body_situation", false, "BODY_SITUATION");
        public final static Property Work_ability = new Property(14, String.class, "work_ability", false, "WORK_ABILITY");
        public final static Property Disease = new Property(15, String.class, "disease", false, "DISEASE");
        public final static Property Disability_type = new Property(16, String.class, "disability_type", false, "DISABILITY_TYPE");
        public final static Property Disability_level = new Property(17, String.class, "disability_level", false, "DISABILITY_LEVEL");
        public final static Property Identity_type = new Property(18, String.class, "identity_type", false, "IDENTITY_TYPE");
        public final static Property Work_situation = new Property(19, String.class, "work_situation", false, "WORK_SITUATION");
        public final static Property Study_situation = new Property(20, String.class, "study_situation", false, "STUDY_SITUATION");
        public final static Property Insurance_situation = new Property(21, String.class, "insurance_situation", false, "INSURANCE_SITUATION");
        public final static Property Photo = new Property(22, String.class, "photo", false, "PHOTO");
        public final static Property People_type = new Property(23, String.class, "people_type", false, "PEOPLE_TYPE");
    }


    public FamilyRegister01Dao(DaoConfig config) {
        super(config);
    }
    
    public FamilyRegister01Dao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"FAMILY_REGISTER01\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"IID\" TEXT," + // 1: iid
                "\"APPLICANT_IID\" TEXT," + // 2: applicant_iid
                "\"NAME\" TEXT," + // 3: name
                "\"ID_NUMBER\" TEXT," + // 4: id_number
                "\"LIVE_NUMBER\" TEXT," + // 5: live_number
                "\"SEX\" TEXT," + // 6: sex
                "\"NATION\" TEXT," + // 7: nation
                "\"POLITICAL_OUTLOOK\" TEXT," + // 8: political_outlook
                "\"CULTURE\" TEXT," + // 9: culture
                "\"MARRIAGE\" TEXT," + // 10: marriage
                "\"FAMILY_RELATIONSHIP\" TEXT," + // 11: family_relationship
                "\"CITY_OR_VILLAGE\" TEXT," + // 12: city_or_village
                "\"BODY_SITUATION\" TEXT," + // 13: body_situation
                "\"WORK_ABILITY\" TEXT," + // 14: work_ability
                "\"DISEASE\" TEXT," + // 15: disease
                "\"DISABILITY_TYPE\" TEXT," + // 16: disability_type
                "\"DISABILITY_LEVEL\" TEXT," + // 17: disability_level
                "\"IDENTITY_TYPE\" TEXT," + // 18: identity_type
                "\"WORK_SITUATION\" TEXT," + // 19: work_situation
                "\"STUDY_SITUATION\" TEXT," + // 20: study_situation
                "\"INSURANCE_SITUATION\" TEXT," + // 21: insurance_situation
                "\"PHOTO\" TEXT," + // 22: photo
                "\"PEOPLE_TYPE\" TEXT);"); // 23: people_type
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"FAMILY_REGISTER01\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, FamilyRegister01 entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String iid = entity.getIid();
        if (iid != null) {
            stmt.bindString(2, iid);
        }
 
        String applicant_iid = entity.getApplicant_iid();
        if (applicant_iid != null) {
            stmt.bindString(3, applicant_iid);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(4, name);
        }
 
        String id_number = entity.getId_number();
        if (id_number != null) {
            stmt.bindString(5, id_number);
        }
 
        String live_number = entity.getLive_number();
        if (live_number != null) {
            stmt.bindString(6, live_number);
        }
 
        String sex = entity.getSex();
        if (sex != null) {
            stmt.bindString(7, sex);
        }
 
        String nation = entity.getNation();
        if (nation != null) {
            stmt.bindString(8, nation);
        }
 
        String political_outlook = entity.getPolitical_outlook();
        if (political_outlook != null) {
            stmt.bindString(9, political_outlook);
        }
 
        String culture = entity.getCulture();
        if (culture != null) {
            stmt.bindString(10, culture);
        }
 
        String marriage = entity.getMarriage();
        if (marriage != null) {
            stmt.bindString(11, marriage);
        }
 
        String family_relationship = entity.getFamily_relationship();
        if (family_relationship != null) {
            stmt.bindString(12, family_relationship);
        }
 
        String city_or_village = entity.getCity_or_village();
        if (city_or_village != null) {
            stmt.bindString(13, city_or_village);
        }
 
        String body_situation = entity.getBody_situation();
        if (body_situation != null) {
            stmt.bindString(14, body_situation);
        }
 
        String work_ability = entity.getWork_ability();
        if (work_ability != null) {
            stmt.bindString(15, work_ability);
        }
 
        String disease = entity.getDisease();
        if (disease != null) {
            stmt.bindString(16, disease);
        }
 
        String disability_type = entity.getDisability_type();
        if (disability_type != null) {
            stmt.bindString(17, disability_type);
        }
 
        String disability_level = entity.getDisability_level();
        if (disability_level != null) {
            stmt.bindString(18, disability_level);
        }
 
        String identity_type = entity.getIdentity_type();
        if (identity_type != null) {
            stmt.bindString(19, identity_type);
        }
 
        String work_situation = entity.getWork_situation();
        if (work_situation != null) {
            stmt.bindString(20, work_situation);
        }
 
        String study_situation = entity.getStudy_situation();
        if (study_situation != null) {
            stmt.bindString(21, study_situation);
        }
 
        String insurance_situation = entity.getInsurance_situation();
        if (insurance_situation != null) {
            stmt.bindString(22, insurance_situation);
        }
 
        String photo = entity.getPhoto();
        if (photo != null) {
            stmt.bindString(23, photo);
        }
 
        String people_type = entity.getPeople_type();
        if (people_type != null) {
            stmt.bindString(24, people_type);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, FamilyRegister01 entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String iid = entity.getIid();
        if (iid != null) {
            stmt.bindString(2, iid);
        }
 
        String applicant_iid = entity.getApplicant_iid();
        if (applicant_iid != null) {
            stmt.bindString(3, applicant_iid);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(4, name);
        }
 
        String id_number = entity.getId_number();
        if (id_number != null) {
            stmt.bindString(5, id_number);
        }
 
        String live_number = entity.getLive_number();
        if (live_number != null) {
            stmt.bindString(6, live_number);
        }
 
        String sex = entity.getSex();
        if (sex != null) {
            stmt.bindString(7, sex);
        }
 
        String nation = entity.getNation();
        if (nation != null) {
            stmt.bindString(8, nation);
        }
 
        String political_outlook = entity.getPolitical_outlook();
        if (political_outlook != null) {
            stmt.bindString(9, political_outlook);
        }
 
        String culture = entity.getCulture();
        if (culture != null) {
            stmt.bindString(10, culture);
        }
 
        String marriage = entity.getMarriage();
        if (marriage != null) {
            stmt.bindString(11, marriage);
        }
 
        String family_relationship = entity.getFamily_relationship();
        if (family_relationship != null) {
            stmt.bindString(12, family_relationship);
        }
 
        String city_or_village = entity.getCity_or_village();
        if (city_or_village != null) {
            stmt.bindString(13, city_or_village);
        }
 
        String body_situation = entity.getBody_situation();
        if (body_situation != null) {
            stmt.bindString(14, body_situation);
        }
 
        String work_ability = entity.getWork_ability();
        if (work_ability != null) {
            stmt.bindString(15, work_ability);
        }
 
        String disease = entity.getDisease();
        if (disease != null) {
            stmt.bindString(16, disease);
        }
 
        String disability_type = entity.getDisability_type();
        if (disability_type != null) {
            stmt.bindString(17, disability_type);
        }
 
        String disability_level = entity.getDisability_level();
        if (disability_level != null) {
            stmt.bindString(18, disability_level);
        }
 
        String identity_type = entity.getIdentity_type();
        if (identity_type != null) {
            stmt.bindString(19, identity_type);
        }
 
        String work_situation = entity.getWork_situation();
        if (work_situation != null) {
            stmt.bindString(20, work_situation);
        }
 
        String study_situation = entity.getStudy_situation();
        if (study_situation != null) {
            stmt.bindString(21, study_situation);
        }
 
        String insurance_situation = entity.getInsurance_situation();
        if (insurance_situation != null) {
            stmt.bindString(22, insurance_situation);
        }
 
        String photo = entity.getPhoto();
        if (photo != null) {
            stmt.bindString(23, photo);
        }
 
        String people_type = entity.getPeople_type();
        if (people_type != null) {
            stmt.bindString(24, people_type);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public FamilyRegister01 readEntity(Cursor cursor, int offset) {
        FamilyRegister01 entity = new FamilyRegister01( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // iid
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // applicant_iid
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // name
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // id_number
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // live_number
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // sex
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // nation
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // political_outlook
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // culture
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // marriage
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // family_relationship
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // city_or_village
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // body_situation
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // work_ability
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // disease
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // disability_type
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // disability_level
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // identity_type
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // work_situation
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // study_situation
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // insurance_situation
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // photo
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23) // people_type
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, FamilyRegister01 entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setIid(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setApplicant_iid(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setId_number(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setLive_number(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setSex(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setNation(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setPolitical_outlook(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setCulture(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setMarriage(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setFamily_relationship(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setCity_or_village(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setBody_situation(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setWork_ability(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setDisease(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setDisability_type(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setDisability_level(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setIdentity_type(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setWork_situation(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setStudy_situation(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setInsurance_situation(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setPhoto(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setPeople_type(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(FamilyRegister01 entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(FamilyRegister01 entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(FamilyRegister01 entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
