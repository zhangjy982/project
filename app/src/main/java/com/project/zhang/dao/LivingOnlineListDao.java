package com.project.zhang.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.project.zhang.entity.LivingOnlineList;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "LIVING_ONLINE_LIST".
*/
public class LivingOnlineListDao extends AbstractDao<LivingOnlineList, Long> {

    public static final String TABLENAME = "LIVING_ONLINE_LIST";

    /**
     * Properties of entity LivingOnlineList.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Item_id = new Property(0, Long.class, "item_id", true, "_id");
        public final static Property Item_title = new Property(1, String.class, "item_title", false, "ITEM_TITLE");
        public final static Property Item_content = new Property(2, String.class, "item_content", false, "ITEM_CONTENT");
        public final static Property Item_time = new Property(3, String.class, "item_time", false, "ITEM_TIME");
    }


    public LivingOnlineListDao(DaoConfig config) {
        super(config);
    }
    
    public LivingOnlineListDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"LIVING_ONLINE_LIST\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: item_id
                "\"ITEM_TITLE\" TEXT," + // 1: item_title
                "\"ITEM_CONTENT\" TEXT," + // 2: item_content
                "\"ITEM_TIME\" TEXT);"); // 3: item_time
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"LIVING_ONLINE_LIST\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, LivingOnlineList entity) {
        stmt.clearBindings();
 
        Long item_id = entity.getItem_id();
        if (item_id != null) {
            stmt.bindLong(1, item_id);
        }
 
        String item_title = entity.getItem_title();
        if (item_title != null) {
            stmt.bindString(2, item_title);
        }
 
        String item_content = entity.getItem_content();
        if (item_content != null) {
            stmt.bindString(3, item_content);
        }
 
        String item_time = entity.getItem_time();
        if (item_time != null) {
            stmt.bindString(4, item_time);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, LivingOnlineList entity) {
        stmt.clearBindings();
 
        Long item_id = entity.getItem_id();
        if (item_id != null) {
            stmt.bindLong(1, item_id);
        }
 
        String item_title = entity.getItem_title();
        if (item_title != null) {
            stmt.bindString(2, item_title);
        }
 
        String item_content = entity.getItem_content();
        if (item_content != null) {
            stmt.bindString(3, item_content);
        }
 
        String item_time = entity.getItem_time();
        if (item_time != null) {
            stmt.bindString(4, item_time);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public LivingOnlineList readEntity(Cursor cursor, int offset) {
        LivingOnlineList entity = new LivingOnlineList( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // item_id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // item_title
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // item_content
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // item_time
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, LivingOnlineList entity, int offset) {
        entity.setItem_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setItem_title(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setItem_content(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setItem_time(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(LivingOnlineList entity, long rowId) {
        entity.setItem_id(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(LivingOnlineList entity) {
        if(entity != null) {
            return entity.getItem_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(LivingOnlineList entity) {
        return entity.getItem_id() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
