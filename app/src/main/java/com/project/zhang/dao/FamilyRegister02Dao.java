package com.project.zhang.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.project.zhang.entity.FamilyRegister02;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "FAMILY_REGISTER02".
*/
public class FamilyRegister02Dao extends AbstractDao<FamilyRegister02, Long> {

    public static final String TABLENAME = "FAMILY_REGISTER02";

    /**
     * Properties of entity FamilyRegister02.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Iid = new Property(1, String.class, "iid", false, "IID");
        public final static Property Applicant_iid = new Property(2, String.class, "applicant_iid", false, "APPLICANT_IID");
        public final static Property Applicant_relationship = new Property(3, String.class, "applicant_relationship", false, "APPLICANT_RELATIONSHIP");
        public final static Property Name = new Property(4, String.class, "name", false, "NAME");
        public final static Property Raise_ability = new Property(5, String.class, "raise_ability", false, "RAISE_ABILITY");
        public final static Property No_raise_reason = new Property(6, String.class, "no_raise_reason", false, "NO_RAISE_REASON");
        public final static Property Id_number = new Property(7, String.class, "id_number", false, "ID_NUMBER");
        public final static Property Family_address = new Property(8, String.class, "family_address", false, "FAMILY_ADDRESS");
        public final static Property Raise_money = new Property(9, String.class, "raise_money", false, "RAISE_MONEY");
        public final static Property People_type = new Property(10, String.class, "people_type", false, "PEOPLE_TYPE");
    }


    public FamilyRegister02Dao(DaoConfig config) {
        super(config);
    }
    
    public FamilyRegister02Dao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"FAMILY_REGISTER02\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"IID\" TEXT," + // 1: iid
                "\"APPLICANT_IID\" TEXT," + // 2: applicant_iid
                "\"APPLICANT_RELATIONSHIP\" TEXT," + // 3: applicant_relationship
                "\"NAME\" TEXT," + // 4: name
                "\"RAISE_ABILITY\" TEXT," + // 5: raise_ability
                "\"NO_RAISE_REASON\" TEXT," + // 6: no_raise_reason
                "\"ID_NUMBER\" TEXT," + // 7: id_number
                "\"FAMILY_ADDRESS\" TEXT," + // 8: family_address
                "\"RAISE_MONEY\" TEXT," + // 9: raise_money
                "\"PEOPLE_TYPE\" TEXT);"); // 10: people_type
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"FAMILY_REGISTER02\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, FamilyRegister02 entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String iid = entity.getIid();
        if (iid != null) {
            stmt.bindString(2, iid);
        }
 
        String applicant_iid = entity.getApplicant_iid();
        if (applicant_iid != null) {
            stmt.bindString(3, applicant_iid);
        }
 
        String applicant_relationship = entity.getApplicant_relationship();
        if (applicant_relationship != null) {
            stmt.bindString(4, applicant_relationship);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(5, name);
        }
 
        String raise_ability = entity.getRaise_ability();
        if (raise_ability != null) {
            stmt.bindString(6, raise_ability);
        }
 
        String no_raise_reason = entity.getNo_raise_reason();
        if (no_raise_reason != null) {
            stmt.bindString(7, no_raise_reason);
        }
 
        String id_number = entity.getId_number();
        if (id_number != null) {
            stmt.bindString(8, id_number);
        }
 
        String family_address = entity.getFamily_address();
        if (family_address != null) {
            stmt.bindString(9, family_address);
        }
 
        String raise_money = entity.getRaise_money();
        if (raise_money != null) {
            stmt.bindString(10, raise_money);
        }
 
        String people_type = entity.getPeople_type();
        if (people_type != null) {
            stmt.bindString(11, people_type);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, FamilyRegister02 entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String iid = entity.getIid();
        if (iid != null) {
            stmt.bindString(2, iid);
        }
 
        String applicant_iid = entity.getApplicant_iid();
        if (applicant_iid != null) {
            stmt.bindString(3, applicant_iid);
        }
 
        String applicant_relationship = entity.getApplicant_relationship();
        if (applicant_relationship != null) {
            stmt.bindString(4, applicant_relationship);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(5, name);
        }
 
        String raise_ability = entity.getRaise_ability();
        if (raise_ability != null) {
            stmt.bindString(6, raise_ability);
        }
 
        String no_raise_reason = entity.getNo_raise_reason();
        if (no_raise_reason != null) {
            stmt.bindString(7, no_raise_reason);
        }
 
        String id_number = entity.getId_number();
        if (id_number != null) {
            stmt.bindString(8, id_number);
        }
 
        String family_address = entity.getFamily_address();
        if (family_address != null) {
            stmt.bindString(9, family_address);
        }
 
        String raise_money = entity.getRaise_money();
        if (raise_money != null) {
            stmt.bindString(10, raise_money);
        }
 
        String people_type = entity.getPeople_type();
        if (people_type != null) {
            stmt.bindString(11, people_type);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public FamilyRegister02 readEntity(Cursor cursor, int offset) {
        FamilyRegister02 entity = new FamilyRegister02( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // iid
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // applicant_iid
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // applicant_relationship
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // name
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // raise_ability
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // no_raise_reason
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // id_number
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // family_address
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // raise_money
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10) // people_type
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, FamilyRegister02 entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setIid(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setApplicant_iid(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setApplicant_relationship(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setRaise_ability(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setNo_raise_reason(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setId_number(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setFamily_address(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setRaise_money(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setPeople_type(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(FamilyRegister02 entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(FamilyRegister02 entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(FamilyRegister02 entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
