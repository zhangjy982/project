package com.project.zhang.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.project.zhang.entity.UserInformation;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER_INFORMATION".
*/
public class UserInformationDao extends AbstractDao<UserInformation, Long> {

    public static final String TABLENAME = "USER_INFORMATION";

    /**
     * Properties of entity UserInformation.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Iid = new Property(1, String.class, "iid", false, "iid");
        public final static Property True_name = new Property(2, String.class, "true_name", false, "true_name");
        public final static Property Sex = new Property(3, String.class, "sex", false, "sex");
        public final static Property Tel = new Property(4, String.class, "tel", false, "tel");
        public final static Property Id_number = new Property(5, String.class, "id_number", false, "id_number");
        public final static Property Location = new Property(6, String.class, "location", false, "location");
        public final static Property Permission = new Property(7, String.class, "permission", false, "permission");
        public final static Property Password = new Property(8, String.class, "password", false, "password");
        public final static Property Time = new Property(9, String.class, "time", false, "time");
    }


    public UserInformationDao(DaoConfig config) {
        super(config);
    }
    
    public UserInformationDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER_INFORMATION\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"iid\" TEXT," + // 1: iid
                "\"true_name\" TEXT," + // 2: true_name
                "\"sex\" TEXT," + // 3: sex
                "\"tel\" TEXT," + // 4: tel
                "\"id_number\" TEXT," + // 5: id_number
                "\"location\" TEXT," + // 6: location
                "\"permission\" TEXT," + // 7: permission
                "\"password\" TEXT," + // 8: password
                "\"time\" TEXT);"); // 9: time
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER_INFORMATION\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, UserInformation entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String iid = entity.getIid();
        if (iid != null) {
            stmt.bindString(2, iid);
        }
 
        String true_name = entity.getTrue_name();
        if (true_name != null) {
            stmt.bindString(3, true_name);
        }
 
        String sex = entity.getSex();
        if (sex != null) {
            stmt.bindString(4, sex);
        }
 
        String tel = entity.getTel();
        if (tel != null) {
            stmt.bindString(5, tel);
        }
 
        String id_number = entity.getId_number();
        if (id_number != null) {
            stmt.bindString(6, id_number);
        }
 
        String location = entity.getLocation();
        if (location != null) {
            stmt.bindString(7, location);
        }
 
        String permission = entity.getPermission();
        if (permission != null) {
            stmt.bindString(8, permission);
        }
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(9, password);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(10, time);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, UserInformation entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String iid = entity.getIid();
        if (iid != null) {
            stmt.bindString(2, iid);
        }
 
        String true_name = entity.getTrue_name();
        if (true_name != null) {
            stmt.bindString(3, true_name);
        }
 
        String sex = entity.getSex();
        if (sex != null) {
            stmt.bindString(4, sex);
        }
 
        String tel = entity.getTel();
        if (tel != null) {
            stmt.bindString(5, tel);
        }
 
        String id_number = entity.getId_number();
        if (id_number != null) {
            stmt.bindString(6, id_number);
        }
 
        String location = entity.getLocation();
        if (location != null) {
            stmt.bindString(7, location);
        }
 
        String permission = entity.getPermission();
        if (permission != null) {
            stmt.bindString(8, permission);
        }
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(9, password);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(10, time);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public UserInformation readEntity(Cursor cursor, int offset) {
        UserInformation entity = new UserInformation( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // iid
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // true_name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // sex
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // tel
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // id_number
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // location
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // permission
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // password
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9) // time
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, UserInformation entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setIid(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTrue_name(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSex(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTel(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setId_number(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setLocation(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setPermission(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setPassword(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setTime(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(UserInformation entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(UserInformation entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(UserInformation entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
